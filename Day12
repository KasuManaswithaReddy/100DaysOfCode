# Pairs violating the BST property.

from typing import Optional
from collections import deque
"""

definition of binary tree node.
class Node:
    def _init_(self,val):
        self.data = val
        self.left = None
        self.right = None
"""
class Solution:
    def pairsViolatingBST(self, n: int, root: Optional['Node']) -> int:
        inorder_traversal = []
        self.inorder(root, inorder_traversal)
        temp = [0] * n
        return self.merge_sort(0, n - 1, inorder_traversal, temp)

    def inorder(self, root, inorder_traversal):
        if root:
            self.inorder(root.left, inorder_traversal)
            inorder_traversal.append(root.data)
            self.inorder(root.right, inorder_traversal)

    def merge(self, low, mid, high, arr, output):
        i = low
        j = mid + 1
        k = low
        inversions = 0

        while i <= mid and j <= high:
            if arr[i] <= arr[j]:
                output[k] = arr[i]
                i += 1
            else:
                output[k] = arr[j]
                j += 1
                inversions += (mid - i + 1)
            k += 1

        while i <= mid:
            output[k] = arr[i]
            i += 1
            k += 1
        while j <= high:
            output[k] = arr[j]
            j += 1
            k += 1

        for i in range(low, high + 1):
            arr[i] = output[i]

        return inversions

    def merge_sort(self, low, high, arr, output):
        inversions = 0

        if low < high:
            mid = (low + high) // 2

            inversions += self.merge_sort(low, mid, arr, output)
            inversions += self.merge_sort(mid + 1, high, arr, output)
            inversions += self.merge(low, mid, high, arr, output)

        return inversions
