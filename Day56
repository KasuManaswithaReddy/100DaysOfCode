# Account Merge

#User function Template for python3

class Solution:
    def accountsMerge(self, accounts):
        class DisjointSet:
            def __init__(self, n):
                self.parent = [i for i in range(n)]
                self.size = [1] * n
            def findparent(self, nod):
                if self.parent[nod] != nod:
                    self.parent[nod] = self.findparent(self.parent[nod])
                return self.parent[nod]
            def unionbysize(self, u, v):
                u_par = self.findparent(u)
                v_par = self.findparent(v)
                if u_par == v_par:
                    return
                if self.size[u_par] < self.size[v_par]:
                    self.parent[u_par] = v_par
                    self.size[v_par] += self.size[u_par]
                else:
                    self.parent[v_par] = u_par
                    self.size[u_par] += self.size[v_par]
        
        n = len(accounts)
        ds = DisjointSet(n)
        
        merge_email_nod = {}

        for i in range(n):
            for j in range(1, len(accounts[i])):
                mail = accounts[i][j]

                if mail not in merge_email_nod:
                    merge_email_nod[mail] = i
                else:
                    ds.unionbysize(merge_email_nod[mail], i)

        merge_email = {}
        for mail, node in merge_email_nod.items():
            root_node = ds.findparent(node)
            if root_node not in merge_email:
                merge_email[root_node] = []
            merge_email[root_node].append(mail)

        ans = []
        for i in range(n):
            if i not in merge_email:
                continue
            merge_email[i].sort()
            name = accounts[i][0]
            temp = [name] + merge_email[i]
            ans.append(temp)

        return ans        
        '''
#        wa 3/1115
        m=len(accounts)
        pr=[*range(m)]
        sz=[1]*m
        def find(a):
            while a!=pr[a]:
                a=pr[a]
            return a
        def union(a,b):
            a=find(a)
            b=find(b)
            if a==b:
                return False
            if sz[a]>sz[b]:
                a,b=b,a
            pr[a]=b
            sz[b]+=sz[a]
            return True
        from collections import defaultdict
        eml_ix=defaultdict(set)
        for ix,ve in enumerate(accounts):
            for email in ve[1:]:
                eml_ix[email].add(ix)
        for email in eml_ix:
            lst=list(eml_ix[email])
            for i in range(1,len(lst)):
                if union(lst[0],lst[i]):
                    a=lst[0]
                    b=lst[i]
                    name=accounts[a][0]
                    nemail=list(set(accounts[a][1:]+accounts[b][1:]))
                    accounts[a]=[name]+nemail
                    accounts[b]=[name]+nemail
        ret=[]
        seen=set()
        for ix in range(m):
            ix=find(ix)
            if ix not in seen:
                ret.append([accounts[ix][0]]+sorted(set(accounts[ix][1:])))
            seen.add(ix)
        return ret
        '''

#{ 
 # Driver Code Starts
#Initial Template for Python 3

if __name__ == '__main__': 
    t = int(input ())
    for _ in range (t):
        n = int(input())
        accounts = []
        for i in range(n):
            cntEmails = int(input())
            nameEmails = input().split()
            accounts.append(nameEmails)
        ob = Solution()
        res = ob.accountsMerge(accounts)
        res.sort()
        print('[', end = '')
        for i in range(len(res)):
            print('[', end = '')
            for j in range(len(res[i])):
                if j != (len(res[i]) - 1):
                    print(res[i][j], end = ', ')
                else:
                    print(res[i][j], end='')
            if (i != len(res) - 1):
                print('], ')
            else:
                print(']', end = '')
        print(']')
# } Driver Code Ends
