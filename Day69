# Minimum cost to fill given weight in a bag


from typing import List


class Solution:
    def minimumCost(self, n : int, w : int, cost : List[int]) -> int:
        # code here
        dp = [float('inf')] * (w + 1)
        dp[0] = 0  # Base case: 0 cost to buy 0 kg
        
        # Fill the dp array
        for x in range(1, w + 1):
            for i in range(n):
                if cost[i] != -1 and x >= (i + 1):  # Ensure the packet is available and can be used
                    dp[x] = min(dp[x], dp[x - (i + 1)] + cost[i])

        # If dp[w] is still infinity, it means it's impossible to form exactly w kg
        return dp[w] if dp[w] != float('inf') else -1  



#{ 
 # Driver Code Starts
class IntArray:

    def __init__(self) -> None:
        pass

    def Input(self, n):
        arr = [int(i) for i in input().strip().split()]  #array input
        return arr

    def Print(self, arr):
        for i in arr:
            print(i, end=" ")
        print()


if __name__ == "__main__":
    t = int(input())
    for _ in range(t):

        n = int(input())

        w = int(input())

        cost = IntArray().Input(n)

        obj = Solution()
        res = obj.minimumCost(n, w, cost)

        print(res)

# } Driver Code Ends
